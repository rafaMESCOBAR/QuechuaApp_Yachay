version: '3.8'

services:
  db:
    image: postgres:13-alpine
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: yachay
      POSTGRES_USER: yachay_user
      POSTGRES_PASSWORD: yachay_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U yachay_user -d yachay"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - yachay-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - yachay-network

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    command: >
      sh -c "
        echo 'Esperando base de datos...' &&
        python manage.py wait_for_db &&
        echo 'Limpiando archivos est√°ticos conflictivos...' &&
        rm -rf /app/staticfiles/* &&
        echo 'Ejecutando migraciones...' &&
        python manage.py migrate &&
        echo 'Cargando datos iniciales...' &&
        python manage.py init_data &&
        echo 'Recolectando archivos est√°ticos...' &&
        python manage.py collectstatic --noinput &&
        echo 'Iniciando servidor...' &&
        gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 quechua_backend.wsgi:application
      "
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    environment:
      # üîß CAMBIO CR√çTICO: Cambiar DEBUG=False por DEBUG=True
      - DEBUG=True  # ‚Üê ESTE ES EL √öNICO CAMBIO NECESARIO
      - DATABASE_URL=postgresql://yachay_user:yachay_password@db:5432/yachay
      - REDIS_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=*,127.0.0.1,localhost,192.168.137.110
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - yachay-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/detection/status/"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - yachay-network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  logs_volume:

networks:
  yachay-network:
    driver: bridge